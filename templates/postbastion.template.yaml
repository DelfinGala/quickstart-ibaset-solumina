AWSTemplateFormatVersion: 2010-09-09
Description: Deploys Lambda to run the APIs on Bastion Domain
Parameters:
  LambdaSubnetID:
    Description: Private SubnetID for Lambda
    Type: 'List<AWS::EC2::Subnet::Id>'
  LambdaSecurityGroup:
    Description: LambdaSecurityGroup for Lambda
    Type: AWS::EC2::SecurityGroup::Id
  BastionS3KeyPrefixLambdaZip:
    Description: S3 Bucket Key
    Type: String
  RandomString:
    Description: Unique suffix
    Type: String
  QSS3BucketName:
    Description: S3 bucket name
    Type: String
  CustomBastionPolicyARN:
    Type: String
  EKSSourceSecGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  BastionSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id
  RDSPassword:
    Type: String
  MongoDBPassword:
    Type: String
  InstanceProfileRoleName:
    Type: String
Resources:
  LambdaCustomResourceBastion:
    Type: 'Custom::LambdaCustomResource'
    Properties:
      RDSPassword: !Ref 'RDSPassword'
      MongoDBPassword: !Ref 'MongoDBPassword'
      # KMSKeyID: !Ref 'KMSKeyID'
      InstanceProfileRoleName: !Ref 'InstanceProfileRoleName'
      ServiceToken: !GetAtt
        - LambdaFunctionBastion
        - Arn
      Id: !Join
        - ''
        - - 'LambdaRes'
          - !Ref RandomString
  LambdaFunctionLogGroupBastion:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "LambdaFunctionBastion"
    Properties:
      LogGroupName: !Join
        - ''
        - - '/aws/lambda/bastionibaset/'
          - !Ref RandomString
  LambdaRoleBastion:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: LambdaBastionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
      Path: /
      RoleName: !Join
        - ''
        - - 'LambdaRoleBastion'
          - !Ref RandomString

  LambdaFunctionBastion:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          stackName: !Ref AWS::StackName
          CustomBastionPolicyARN:  !Ref CustomBastionPolicyARN
          EKSSourceSecGroupId: !Ref EKSSourceSecGroupId
          BastionSecurityGroupID: !Ref BastionSecurityGroupID

      Code:
        S3Bucket: !Ref QSS3BucketName
        S3Key: !Ref BastionS3KeyPrefixLambdaZip
      Timeout: 400
      Handler: 'bastionpostscriptlambda.lambda_handler'
      Runtime: 'python3.8'
      FunctionName: !Join
        - ''
        - - 'BastionFunction'
          - !Ref RandomString
      VpcConfig:
        SecurityGroupIds: !Split [ "," , !Ref LambdaSecurityGroup ]
        SubnetIds: !Ref LambdaSubnetID
      Role:
        Fn::GetAtt:
          - LambdaRoleBastion
          - Arn

Outputs:
  RoleName:
    Value: LambdaRoleBastion['RoleName']